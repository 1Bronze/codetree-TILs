const fs = require("fs");
const input = fs.readFileSync(0).toString().trim().split('\n');

// 변수 선언 및 입력
const n = Number(input[0]);
const blocks = input[1].trim().split(' ').map(Number);


// 생각해 보면, 그룹의 숫자를 고를 때 어느 숫자를 고르던
// 그 숫자의 홀짝이 같다면 그룹의 총합에서 홀짝도 같아지게 됩니다.
// 따라서 어느 숫자를 골랐는지 알 필요가 없으며, 짝수와 홀수 중 어느 숫자를
// 새로 골랐는지만 정보를 가지고 있다면 문제를 풀 수 있습니다.
let even = 0;
let odd = 0;
blocks.forEach(block => {
    if (block % 2 === 0) {
        even += 1;
    } else {
        odd += 1;
    }
});

// 그룹을 나눌때 숫자를 가능한 적게 쓰는 것이 유리합니다. 숫자를 적게 사용해야
// 남은 숫자들로 더 많은 그룹을 만들 가능성이 생기기 때문입니다.

// 생각해보면, 홀수 그룹을 만들 때 짝수 숫자를 그룹에 넣는것은 의미가 없습니다.
// 짝수 숫자를 넣으나 마나 어차피 그룹의 홀짝성이 변하지 않기 때문입니다.
// 따라서 홀수 그룹을 만들 때에는 짝수 숫자를 넣지 않고 홀수 숫자만 1개로
// 그룹을 형성하는 것이 유리합니다.
// 짝수 그룹을 만들 때에는 홀수 2개로 만들거나 짝수 1개로 만들 수 있는데,
// 홀수 그룹을 만들 때에 사용되지 않는 짝수 숫자부터 그룹에 이용하는 것이 유리합니다.

let groupNum = 0;
while(true) {
    // 묶음을 짝수, 홀수를 번갈아가며 나오게끔 해야 하므로
    // groupNum이 짝수일 때, 묶음은 짝수로 만들어야 하고
    // groupNum이 홀수일 때, 묶음은 홀수로 만들어야 합니다.
    if (groupNum % 2 === 0) {
        // 짝수 묶음을 만들 때에는, 짝수 숫자 1개로 그룹을 만드는 것이 최선입니다.
        // 만약 짝수 숫자가 부족하다면, 홀수 숫자 2개로 그룹을 만드는 것이 최선입니다.
        if (even) {
            even -= 1;
            groupNum += 1;
        } else if (odd >= 2) {
            odd -= 2;
            groupNum += 1;
        } else {
            // 더 이상 그룹을 만들지 못하는 상황입니다.

            if (even > 0 || odd > 0) {
                groupNum -= 1;
            }
            break;
        }
    } else {
        // 홀수 묶음을 만들 때에는, 홀수 숫자 1개로 그룹을 만드는 것이 최선입니다.
        if (odd) {
            odd -= 1;
            groupNum += 1;
        } else {
            // 더 이상 그룹을 만들지 못하는 상황입니다.
            break;
        }
    }
}

console.log(groupNum);